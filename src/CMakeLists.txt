cmake_minimum_required(VERSION 3.0 FATAL_ERROR)
project(DetectorModule  LANGUAGES CXX C CUDA)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O0 -g3  -Wno-deprecated-declarations")
set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -Xcompiler -D__CUDA_NO_HALF_OPERATORS__")

# CUDA
find_package(CUDA REQUIRED)
include_directories(${CUDA_INCLUDE_DIRS})
message("CUDA_INCLUDE_DIRS" ${CUDA_INCLUDE_DIRS})


#opencv
set(OpenCV_DIR "/home/eric/Desktop/libtorch-video-classification/third_path/opencv/")
find_package(OpenCV  REQUIRED)
include_directories(${OpenCV_INCLUDE_DIR})
message("OpenCV_INCLUDE_DIRS" ${OpenCV_INCLUDE_DIRS})

#trtorch
set(TRTorch_INCLUDE_DIR "/home/eric/Desktop/libtorch-video-classification/third_path/trtorch/include/")
include_directories(${TRTorch_INCLUDE_DIR})
set(TRTorch_LIBS "/home/eric/Desktop/libtorch-video-classification/third_path/trtorch/lib/libtrtorch.so")
set(TensorRT_LIBS "/home/eric/Desktop/libtorch-video-classification/third_path/TensorRT/lib/libnvinfer.so.7")

# 项目头文件目录
set(PROJECT_INCLUDES
    ./
    ../include/
    anchor/
    bbox/
    detector/
    transform/
    utils/
    single_roi_extractor/
    roi_align/
)

foreach(PROJECT_INCLUDE ${PROJECT_INCLUDES})
    include_directories(${PROJECT_SOURCE_DIR}/${PROJECT_INCLUDE})
endforeach(PROJECT_INCLUDE)

set(SRC
    ./Detector.cpp
    ./DetectorImpl.cpp
    ./types.cpp
    ./DetectorCreator.cpp
    ./anchor/AnchorGenerator.cpp
    ./bbox/bbox.cpp
    ./bbox/nms_kernel.cu
    ./single_roi_extractor/SingleRoIExtractor.cpp
    ./roi_align/RoIAlign.cpp
    ./roi_align/roi_align_kernel.cu

    #transforms
    ./transform/transforms.cpp

    #detector
    ./detector/DetectorSSD.cpp
    ./detector/DetectorRetinanet.cpp
    ./detector/DetectorFasterRcnn.cpp
    ./detector/DetectorCommon.cpp

    #utils
    ./utils/logging.hpp
    ./utils/timer.hpp
    ./utils/jsoncpp.cpp
    )

#set(DEP_LIBS ${TORCH_LIBRARIES} ${CUDA_LIBRARIES} ${OpenCV_LIBS} ${TensorRT_LIBS})
set(DEP_LIBS ${TORCH_LIBRARIES} ${CUDA_LIBRARIES} ${OpenCV_LIBS} ${TRTorch_LIBS} ${TensorRT_LIBS})

# 编译库, 输出到 ${CMAKE_BINARY_DIR}/lib
SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)
add_library(DetectorModule SHARED ${SRC})
target_link_libraries(DetectorModule ${DEP_LIBS})
set_target_properties(DetectorModule PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

################################### 安装配置 ########################################
install (TARGETS DetectorModule
    PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE
    ARCHIVE DESTINATION lib
    LIBRARY DESTINATION lib
    RUNTIME DESTINATION bin
)

